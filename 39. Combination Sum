class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> subset = new ArrayList<>();
        fun(0, candidates, target, subset, new ArrayList<>());
        return subset;
    }
    
    public void fun(int index,int[] arr,int target, List<List<Integer>> subset, List<Integer> list){
        if(index==arr.length){
            if(target == 0){
                subset.add(new ArrayList<>(list));
            }
            return;
        }
        
        if(arr[index] <= target){
            list.add(arr[index]);
            fun(index,arr,target-arr[index], subset, list);
            list.remove(list.size()-1);
        }
        
        fun(index+1,arr,target, subset, list);

    }
}
