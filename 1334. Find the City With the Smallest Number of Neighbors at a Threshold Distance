class Solution {
    public int findTheCity(int n, int[][] edges, int distanceThreshold) {
        ArrayList<int []>[] graph = new ArrayList[n];
        for(int i=0;i<n;i++){
            graph[i] = new ArrayList<>();
        }
        for(int []edge : edges){
            graph[edge[0]].add(new int[]{edge[1],edge[2]});
            graph[edge[1]].add(new int[]{edge[0],edge[2]}); 
        }
        int city = 0;
        int min = n+1; // min can't be greater than n+1;
        for(int i=0; i<n; i++){
            int count = dfs(graph, i , distanceThreshold);
            if(count <= min){
                city = i;
                min = count;
            }
        }
        return city;
    }

    private int dfs(ArrayList<int []> [] graph, int src, int k){
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)-> a[1]-b[1]);
        pq.add(new int[]{src, 0});
        boolean [] vis = new boolean[graph.length];
        int countNode = -1;
        while(pq.size()!=0){
            int []temp = pq.poll();
            if(vis[temp[0]])continue;
            vis[temp[0]] = true;
            countNode++;
            for(int []nbrs: graph[temp[0]]){
                if(vis[nbrs[0]]!=true && nbrs[1]+temp[1]<=k){
                    pq.add(new int[]{nbrs[0], nbrs[1]+ temp[1]});
                }
            }
        }
        return countNode;
    }
}
