class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        int [] vis = new int[n];
        Map<Integer, List<int[]>> graph = new HashMap<>();
        for(int [] time: times){
            int src = time[0], tar = time[1], weight = time[2];
            if(!graph.containsKey(src)){
                graph.put(src, new LinkedList<int[]>());
            }
            graph.get(src).add(new int[]{tar, weight});
        }
        
        Queue<int[]> q = new PriorityQueue<>((a,b)-> a[1]- b[1]);

        Set<Integer> visited = new HashSet<>();
        q.add(new int[]{k, 0});

        int res = 0;

        while(!q.isEmpty()){
            int [] top = q.poll();
            int src = top[0], srcWeight = top[1];
            if(visited.contains(src))continue;
            res = srcWeight;
            visited.add(src);

            if(!graph.containsKey(src)) continue;
            for(int [] edge : graph.get(src)){
                int tar = edge[0], targetWeight = edge[1];
                q.add(new int[]{tar, srcWeight+targetWeight});
            }
        }
        return visited.size() == n? res: -1;

    }
}
