import java.util.*;

class Solution {
    private void makeParent(TreeNode node, HashMap<TreeNode, TreeNode> map) {
        Queue<TreeNode> q = new LinkedList<>();
        q.add(node);
        while (!q.isEmpty()) {
            TreeNode curr = q.poll();
            if (curr.left != null) {
                map.put(curr.left, curr);
                q.add(curr.left);
            }
            if (curr.right != null) {
                map.put(curr.right, curr);
                q.add(curr.right);
            }
        }
    }

    public List<Integer> distanceK(TreeNode root, TreeNode t, int k) {
        HashMap<TreeNode, TreeNode> map = new HashMap<>();
        Set<TreeNode> visited = new HashSet<>();
        List<Integer> ans = new ArrayList<>();
        makeParent(root, map);
        Queue<TreeNode> q = new LinkedList<>();

        q.add(t);
        visited.add(t);

        int currLvl = 0;
        while (!q.isEmpty()) {
            int s = q.size();
            if (currLvl == k) break;
            currLvl++;

            for (int i = 0; i < s; i++) {
                TreeNode curr = q.poll();
                if (curr.left != null && visited.add(curr.left)) {
                    q.add(curr.left);
                }
                if (curr.right != null && visited.add(curr.right)) {
                    q.add(curr.right);
                }
                TreeNode parent = map.get(curr);
                if (parent != null && visited.add(parent)) {
                    q.add(parent);
                }
            }
        }

        while (!q.isEmpty()) {
            TreeNode curr = q.poll();
            ans.add(curr.val);
        }
        return ans;
    }
}
