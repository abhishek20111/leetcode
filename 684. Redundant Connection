class Solution {
    int [] par;
    public int[] findRedundantConnection(int[][] edges) {
        int n = edges.length;
        par = new int[n+1];
        for(int i=1; i<=n; i++){
            par[i] = i;
        }
        for(int [] edg: edges){
            if(find(edg[0]) == find(edg[1])) return edg;
            union(edg[0], edg[1]);
        }
    return null;
    }

    private int find(int node){
        while(par[node] != node) node = par[node];
        return node;
    }

    private void union(int i, int j){
        int iroot = find(i);
        int jroot = find(j);

        if(iroot != jroot){
            par[jroot] = iroot; 
        }
    }
}
