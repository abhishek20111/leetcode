class Solution {
    public int snakesAndLadders(int[][] board) {
        int n =board.length;
        int m =board[0].length;
        int step = 0;
        Queue<Integer> q = new LinkedList<Integer>();
        boolean vis[][] = new boolean[n][m];
        q.add(1);
        vis[n-1][0]=true;
        while(!q.isEmpty()){
            int size = q.size();

            for(int i=0; i<size; i++){
                int x = q.poll();
                if(x >= n*n)return step;
                for(int k=1; k<=6; k++){
                    if((k+x) > (n*n))break;
                    int []cor = cordinate_value(x+k, n);
                    int r = cor[0];
                    int c = cor[1];
                    if(vis[r][c]==true)continue;
                    vis[r][c] = true;
                    if(board[r][c] ==-1)q.add(k+x);
                    else q.add(board[r][c]);
                }
            }step++;
        }
        return -1;
    }

    private int[] cordinate_value(int cur, int n){ //this function to find the cordinate of the value 
        int r = n-(cur-1)/n -1;
        int c = (cur-1)%n;
        if(r%2==n%2){
            return new int[]{r, n-1-c};
        }else{
            return new int[]{r,c};
        }

    }
}
